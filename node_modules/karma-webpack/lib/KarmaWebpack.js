/* eslint-disable */
const webpack = require('webpack');
const path = require('path');
const fs = require('fs');

class KarmaSyncPlugin {
  constructor(options) {
    this.karmaEmitter = options.karmaEmitter;
    this.controller = options.controller;
  }

  apply(compiler) {
    this.compiler = compiler;

    compiler.hooks.done.tap('KarmaSyncPlugin', async stats => {
      console.log(stats.toString({
        chunks: false,  // Makes the build much quieter
        colors: true    // Shows colors in the console
      }));
      this.controller.bundlesContent = {};
      stats.toJson().assets.forEach(webpackFileObj => {
        const filePath = `${compiler.options.output.path}/${webpackFileObj.name}`;
        this.controller.bundlesContent[webpackFileObj.name] = fs.readFileSync(filePath, 'utf-8');
      });
      this.karmaEmitter.refreshFiles();

      // console.log('-- karma --');
      // this.karmaEmitter._fileList.files.included.forEach(fileObj => {
      //   console.log(fileObj.path);
      // });
    });

    // compiler.hooks.invalid.tap('KarmaSyncPlugin', () => this.blockKarma());
    // compiler.hooks.watchRun.tap('KarmaSyncPlugin', () => this.blockKarma());
    // compiler.hooks.run.tapAsync('KarmaSyncPlugin', (_, callback) => this.blockKarma());
  }
}

const defaultWebpackOptions = {
  mode: 'development',
  // entry: {
  //   one: path.resolve(__dirname + '../../../../') + '/test/foo-one.test.js',
  //   two: path.resolve(__dirname + '../../../../') + '/test/foo-two.test.js',
  // },
  output: {
    filename: '[name].js',
    path: path.resolve(__dirname + '../../../../') + '/.karma-cache',
  },
  // plugins: [
  //   new KarmaSyncPlugin({ karmaEmitter: true })
  // ],
  optimization: {
    runtimeChunk: 'single',
    splitChunks: {
      chunks: 'all',
      minSize: 0,
      cacheGroups: {
        commons: {
          name: 'commons',
          chunks: 'initial',
          minChunks: 2,
        },
      },
    },
  },
};

class KarmaWebpack {
  constructor() {
    this.isActive = false;
    this.bundlesContent = {};
    this.__debounce = false;
  }

  configure(webpackOptions, karmaOptions) {
    this.__webpackOptions = {
      ...defaultWebpackOptions,
      ...webpackOptions,
    };

    this.__webpackOptions.plugins = this.__webpackOptions.plugins || [];
    this.__webpackOptions.plugins.push(
      new KarmaSyncPlugin({
        karmaEmitter: karmaOptions.emitter,
        controller: this,
      })
    );
  }

  async bundle() {
    if (this.isActive === false && this.__debounce === false) {
      console.log('Webpack bundling...');
      this._activePromise = this._bundle();
    }
    return this._activePromise;
  }

  async _bundle() {
    this.isActive = true;
    this.__debounce = true;
    this.compiler = webpack(this.__webpackOptions);
    return new Promise((resolve) => {
      this.compiler.run((err, stats) => {
        if (err) {
          console.error(err.stack || err);
          if (err.details) {
            console.error(err.details);
          }
          return;
        }

        const info = stats.toJson();
        if (stats.hasErrors()) {
          console.error(info.errors);
        }
        if (stats.hasWarnings()) {
          console.warn(info.warnings);
        }

        this.__debounce = setTimeout(() => this.__debounce = false, 100);
        this.isActive = false;
        resolve();
      });
    });
  }
}

module.exports = KarmaWebpack;
